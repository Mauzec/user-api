// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    full_name,
    sex,
    age,
    email,
    phone,
    hashed_password
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, username, full_name, sex, age, email, phone, hashed_password, avatar, status, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	FullName       string `json:"full_name"`
	Sex            string `json:"sex"`
	Age            int32  `json:"age"`
	Email          string `json:"email"`
	Phone          string `json:"phone"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.FullName,
		arg.Sex,
		arg.Age,
		arg.Email,
		arg.Phone,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Sex,
		&i.Age,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, full_name, sex, age, email, phone, hashed_password, avatar, status, password_changed_at, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Sex,
		&i.Age,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, full_name, sex, age, email, phone, hashed_password, avatar, status, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Sex,
		&i.Age,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsernameForUpdate = `-- name: GetUserByUsernameForUpdate :one
SELECT id, username, full_name, sex, age, email, phone, hashed_password, avatar, status, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserByUsernameForUpdate(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsernameForUpdate, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Sex,
		&i.Age,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET phone = $2,
    full_name = $3,
    sex = $4,
    email = $5
WHERE id = $1
RETURNING id, username, full_name, sex, age, email, phone, hashed_password, avatar, status, password_changed_at, created_at
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Phone    string `json:"phone"`
	FullName string `json:"full_name"`
	Sex      string `json:"sex"`
	Email    string `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Phone,
		arg.FullName,
		arg.Sex,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Sex,
		&i.Age,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
		&i.Avatar,
		&i.Status,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
